{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","utils/validation.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","validateUrls","isUrl","setUrlFieldsTrue","useState","Math","random","toString","slice","id","touched","setTouched","hasValidationError","setValidationError","hasError","htmlFor","classNames","type","placeholder","event","target","url","undefined","current","imgUrlTrue","imdbUrlTrue","handleUrlValidation","onBlur","pattern","test","NewMovie","onAdd","count","setCount","setTitle","setDescription","setImageUrl","setImdbUrl","setImdbId","isUrlFieldsTrue","isFieldsWithoutErrors","onSubmit","preventDefault","onClick","disabled","App","moviesFromServer","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8a9fcc32.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  validateUrls?: (url: string) => boolean,\n  isUrl?: boolean,\n  setUrlFieldsTrue?: React.Dispatch<React.SetStateAction<{\n    imgUrlTrue: boolean;\n    imdbUrlTrue: boolean;\n  }>>,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => { },\n  validateUrls = () => false,\n  isUrl = false,\n  setUrlFieldsTrue,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const [hasValidationError, setValidationError] = useState(false);\n  const hasError = touched && required && !value;\n\n  let validationError = false;\n  const handleUrlValidation = (url: string) => {\n    validationError = validateUrls(url);\n\n    if (!validationError && isUrl && (value !== '')) {\n      setValidationError(true);\n\n      if (setUrlFieldsTrue !== undefined) {\n        switch (name) {\n          case 'imgUrl':\n            setUrlFieldsTrue(current => ({\n              ...current,\n              imgUrlTrue: false,\n            }));\n            break;\n\n          case 'imdbUrl':\n            setUrlFieldsTrue(current => ({\n              ...current,\n              imdbUrlTrue: false,\n            }));\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      return;\n    }\n\n    setValidationError(false);\n\n    if (setUrlFieldsTrue !== undefined) {\n      switch (name) {\n        case 'imgUrl':\n          setUrlFieldsTrue(current => ({\n            ...current,\n            imgUrlTrue: true,\n          }));\n          break;\n\n        case 'imdbUrl':\n          setUrlFieldsTrue(current => ({\n            ...current,\n            imdbUrlTrue: true,\n          }));\n          break;\n\n        default:\n          break;\n      }\n    }\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => {\n            onChange(event.target.value);\n            handleUrlValidation(event.target.value);\n          }}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {hasValidationError && (\n        <p className=\"help is-danger\">URL is invalid</p>\n      )}\n    </div>\n  );\n};\n","// eslint-disable-next-line\nconst pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.,\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\nexport const validateUrls = (url: string): boolean => pattern.test(url);\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\nimport { validateUrls } from '../../utils/validation';\n\ntype Props = {\n  onAdd: (movie: Movie) => void\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImageUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n  const [isUrlFieldsTrue, setUrlFieldsTrue] = useState({\n    imgUrlTrue: false,\n    imdbUrlTrue: false,\n  });\n\n  const isUrl = true;\n  const resetForm = () => {\n    setTitle('');\n    setDescription('');\n    setImageUrl('');\n    setImdbUrl('');\n    setImdbId('');\n\n    setCount(current => current + 1);\n  };\n\n  const handleSubmitButton = () => {\n    onAdd({\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    });\n\n    resetForm();\n  };\n\n  const isFieldsWithoutErrors = title && imgUrl && imdbUrl && imdbId\n   && isUrlFieldsTrue.imdbUrlTrue && isUrlFieldsTrue.imgUrlTrue;\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={(event) => event.preventDefault()}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={setTitle}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={setDescription}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={setImageUrl}\n        validateUrls={validateUrls}\n        isUrl={isUrl}\n        setUrlFieldsTrue={setUrlFieldsTrue}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={setImdbUrl}\n        validateUrls={validateUrls}\n        isUrl={isUrl}\n        setUrlFieldsTrue={setUrlFieldsTrue}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={setImdbId}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            onClick={handleSubmitButton}\n            disabled={!isFieldsWithoutErrors}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n  const addMovie = (movie: Movie) => {\n    setMovies(current => [...current, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}