{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","validateUrls","isUrl","useState","Math","random","toString","slice","id","touched","setTouched","hasError","validationError","hasValidationError","htmlFor","classNames","type","placeholder","event","url","target","onBlur","NewMovie","onAdd","count","increaseCount","addNewTitle","addNewDescription","addNewImgUrl","addNewImdbUrl","addNewImdbId","pattern","RegExp","test","isFieldsWithoutErrors","onSubmit","preventDefault","onClick","current","disabled","App","moviesFromServer","addMovieToList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e7b9366c.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  validateUrls?: (url: string) => boolean,\n  isUrl?: boolean,\n  // setUrlsState?: (cond: boolean) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n  validateUrls = () => false,\n  isUrl = false,\n  // setUrlsState = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value;\n\n  let validationError = false;\n  const handleUrlValidation = (url: string) => {\n    validationError = validateUrls(url);\n  };\n\n  const hasValidationError = !validationError && isUrl && (value !== '');\n\n  // if (!hasValidationError) {\n  //   setUrlsState(true);\n  // }\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => {\n            onChange(event.target.value);\n            handleUrlValidation(event.target.value);\n          }}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {hasValidationError && (\n        <p className=\"help is-danger\">URL is invalid</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, increaseCount] = useState(0);\n  const [title, addNewTitle] = useState('');\n  const [description, addNewDescription] = useState('');\n  const [imgUrl, addNewImgUrl] = useState('');\n  const [imdbUrl, addNewImdbUrl] = useState('');\n  const [imdbId, addNewImdbId] = useState('');\n  // const [isTrueImgUrl, setImgUrlAsTrue] = useState(false);\n  // const [isTrueImdbUrl, setImdbUrlAsTrue] = useState(false);\n\n  const isUrl = true;\n\n  const handleSubmitButton = () => {\n    onAdd({\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    });\n\n    addNewTitle('');\n    addNewDescription('');\n    addNewImgUrl('');\n    addNewImdbUrl('');\n    addNewImdbId('');\n\n    increaseCount(current => current + 1);\n  };\n\n  // eslint-disable-next-line\n  const pattern = new RegExp(/^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/);\n\n  const validateUrls = (url: string): boolean => pattern.test(url);\n\n  const isFieldsWithoutErrors = title && imgUrl && imdbUrl && imdbId;\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={(event) => event.preventDefault()}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={addNewTitle}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={addNewDescription}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={addNewImgUrl}\n        validateUrls={validateUrls}\n        isUrl={isUrl}\n        // setUrlsState={setImgUrlAsTrue}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={addNewImdbUrl}\n        validateUrls={validateUrls}\n        isUrl={isUrl}\n        // setUrlsState={setImdbUrlAsTrue}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={addNewImdbId}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            onClick={handleSubmitButton}\n            disabled={!isFieldsWithoutErrors}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, addMovieToList] = useState(moviesFromServer);\n  const addMovie = (movie: Movie) => {\n    addMovieToList(current => [...current, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}